//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////// CUSTOM FUNCTIONZZZ  /////////////////////

function (f$)calcFST(o<Subpopulation>$ subpop1, o<Subpopulation>$ subpop2) //// Function to calculate FST given two populations
{
	p1_p = sim.mutationFrequencies(subpop1);
	p2_p = sim.mutationFrequencies(subpop2);
	mean_p = (p1_p + p2_p) / 2.0;
	H_t = 2.0 * mean_p * (1.0 - mean_p);
	H_s = p1_p * (1.0 - p1_p) + p2_p * (1.0 - p2_p);
	fst = 1.0 - H_s/H_t;
	fst = fst[!isNAN(fst)];  // exclude muts where mean_p is 0.0 or 1.0
	return mean(fst);
}


function (f$)genomicHeterozygosity(o<Genome>$ genome1, o<Genome>$ genome2) //// Calculates Genomic Diversity between two genomes
{
	muts1 = genome1.mutations;
	muts2 = genome2.mutations;
	unshared = setSymmetricDifference(muts1, muts2);
	pi = size(unshared) / Length;
	return pi;
}

/*

  Estimate the average nucleotide heterozygosity in a subpopulation by sampling individuals at random and averaging the heterozygosity of all of the individuals sampled.  Note that this function normally uses a sample of individuals, of a size supplied in the optional parameter sampleSize; but if sampleSize is equal to the number of individuals in subpop, it will instead compute the heterozygosity exactly, as the mean of the heterozygosities of all individuals, rather than taking a sample.  For large subpopulations, that will of course be much slower than using a sample, however.

*/



function (f$)subpopHeterozygosity(o<Subpopulation>$ subpop, [i$ sampleSize=100]) //// Calcualte Genet Heterozygosity from a sample of Individuals of a pop
{
	if (sampleSize == subpop.individualCount)
		sampledIndividuals = subpop.individuals;
	else
		sampledIndividuals = sample(subpop.individuals, sampleSize, replace=F);
	
	pi_total = 0;
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosity(genomes[0], genomes[1]);
		pi_total = pi_total + individual_pi;
	}
	return pi_total / sampleSize;
}


function (f$)subpopHeterozygositystd(o<Subpopulation>$ subpop, [i$ sampleSize=100]) //// Calcualte Genet Heterozygosity from a sample of Individuals of a pop
{
	if (sampleSize == subpop.individualCount)
		sampledIndividuals = subpop.individuals;
	else
		sampledIndividuals = sample(subpop.individuals, sampleSize, replace=F);
	
	pi_total = c();
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosity(genomes[0], genomes[1]);
		pi_total = c(pi_total,individual_pi);
	}
	return sd(pi_total);
}

function (f$)subpopHeterozygositymean(o<Subpopulation>$ subpop, [i$ sampleSize=100]) //// Calcualte Genet Heterozygosity from a sample of Individuals of a pop
{
	if (sampleSize == subpop.individualCount)
		sampledIndividuals = subpop.individuals;
	else
		sampledIndividuals = sample(subpop.individuals, sampleSize, replace=F);
	
	pi_total = c();
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosity(genomes[0], genomes[1]);
		pi_total = c(pi_total,individual_pi);
	}
	return mean(pi_total);
}

////////////////////////////////////////////////////////////////// NEW Modified Functions for Windows   /////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


function (f$)genomicHeterozygosityWindow(o<Genome>$ genome1, o<Genome>$ genome2 ,integer$ window1 , integer$ window2 ) ///Calc heterozig between 2 genomes only for a certain window
{
	muts1 = genome1.mutations;
	muts1 = muts1[muts1.position>=window1 & muts1.position<=window2];
	
	muts2 = genome2.mutations;
	muts2 = muts2[muts2.position>=window1 & muts2.position<=window2];	
	
	unshared = setSymmetricDifference(muts1, muts2);
	pi = size(unshared) / (window2-window1);
	return pi;
}


function (f$)subpopHeterozygosityWindow( o<Subpopulation>$ subpop, integer$ window1, integer$ window2, [i$ sampleSize=100] ) ///Calc heteroz for a sample of inds from a pop BUT for a specific window
{
	if (sampleSize == subpop.individualCount)
		sampledIndividuals = subpop.individuals;
	else
		sampledIndividuals = sample(subpop.individuals, sampleSize, replace=T);
	
	pi_total = 0;
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosityWindow(genomes[0], genomes[1], window1 , window2);
		pi_total = pi_total + individual_pi;
	}
	return pi_total / sampleSize;
}



function (f$)sampleHeterozygosityWindow(  * sampledIndividuals , integer$ window1, integer$ window2) ///Calc heterozigo for a SPECIFIC group/sample of inds and specific window
{
	pi_total = 0;
	for (individual in sampledIndividuals)
	{
		genomes = individual.genomes;
		individual_pi = genomicHeterozygosityWindow(genomes[0], genomes[1], window1 , window2);
		pi_total = pi_total + individual_pi;
	}
	return pi_total / size(sampledIndividuals);
}




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






initialize() {
	
	//set up filepaths	
	defineConstant("mu", 1.67e-09);	
	defineConstant("CAP", 1500);	

	defineConstant("outPref", "out_test_WF_2D");	
	defineConstant("psmc_file", "Nipponia_softCollapse_gen3_varSCALE2.txt");
	defineConstant("ranges_file", "Nipponia_softCollapse_gen3_varSCALE2_ranges.txt");
	defineConstant("rho_file_in", "RecombFile.txt");
	defineConstant("coord_file_in","GCF_000247815.1_FicAlb1.5_genomic.gff_for_SLiM.txt");





	rho_file = readFile(rho_file_in);


	defineConstant("Length", asInteger(strsplit(rho_file[length(rho_file)-1],"\t")[2])); /// L= length of sequence
	coord_file = readFile(coord_file_in);
	
	initializeSLiMModelType("nonWF");
    initializeSLiMOptions(dimensionality="xy", nucleotideBased=T);
	initializeAncestralNucleotides(randomNucleotides(Length+1)); /////Reference Nucl seq
    // initializeTreeSeq(checkCoalescence=T);


	
	


	//random seed
	setSeed(rdunif(1, 0, asInteger(2^32) - 1));	
	defineConstant("start", clock());	////to track time	
		
		
	/////mutations	/////for now all are neutral
	initializeMutationTypeNuc("m1", 0.0, "f", 0.0);         // non-coding	
	initializeMutationTypeNuc("m2", 0.0, "f", 0.0);         // synonymous	
	initializeMutationTypeNuc("m3", 0.0, "f", 0.0);         // deleterious	
	initializeMutationTypeNuc("m4", 0.0, "f", 0.0);         // beneficial	

		
		
		
	/////Create Chromosome Building Blocks	//////Jukes Candor simplest mutation matrix, transition=transversion
	initializeGenomicElementType("g1", c(m1,m2,m3,m4), c(0.25,0.25,0.25,0.25), mmJukesCantor(mu));   // exon	
	initializeGenomicElementType("g2", c(m1,m2,m3), c(0.33,0.33,0.33), mmJukesCantor(mu));           // intron	
	initializeGenomicElementType("g3", c(m1,m2), c(0.5,0.5), mmJukesCantor(mu));                     // non-coding	
		

	/////Construct Chromosome from Coordinate file
	for (coord_line in coord_file){
			ROW = strsplit(coord_line, "\t");
			feature = ROW[2];

			if(feature=="exon") {
				initializeGenomicElement(g1, asInteger(ROW[3]), asInteger(ROW[4]));
			}	
			
			if(feature=="intron") {	
				initializeGenomicElement(g2, asInteger(ROW[3]), asInteger(ROW[4]));	
			}	
			
			if(feature=="non_coding") {	
				initializeGenomicElement(g3, asInteger(ROW[3]), asInteger(ROW[4]));	
			}	
			
		}	

	/////Construct Recombination Landscape from file
	rates = NULL;
	ends = NULL;

	for (rho_line in rho_file){////Recombination rates
			components = strsplit(rho_line, "\t");
			ends = c(ends, asInteger(components[2])); //append to ends file
			rates = c(rates, asFloat(components[7])); //append to rates file
		}

	defineConstant("recomb_ends", ends); //define ends vector
	defineConstant("recomb_rates", rates); //define rate vector
	// initializeRecombinationRate(rates, ends); //recombination only needs those two things ends+rates
	initializeRecombinationRate(1e-8);  ///// FLAT Reacombination Rate

	// psmc file
	file = readFile(psmc_file);
	defineConstant("psmc", file); //for later use

	// ranges file
	file3 = readFile(ranges_file);
	defineConstant("ranges", file3); //for later use

	//// Model settings
	defineConstant("LifeTable",c(1.0,1.0,1.0,0.8,0.6,0.4,0.2,0.1,0.05,0.0));               //// Life table should we choose to use it



	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	///////////////////////////////////////////////////////////////// 
	////PARAMS
paramtersfile = readFile('Parameters_File.txt');

defineConstant("ID", paste(strsplit(paramtersfile[0],'')[0:(length(strsplit(paramtersfile[0],''))-2)],''));
defineConstant("Capacity_Multiplier", asFloat(paramtersfile[1]));
defineConstant("Start_DEC", asFloat(paramtersfile[2]));	
defineConstant("Start_INC", asFloat(paramtersfile[3]));	
defineConstant("Big_Timer", asFloat(paramtersfile[4]));	
defineConstant("Small_Timer", asFloat(paramtersfile[5]));	
defineConstant("decrease_amount", asFloat(paramtersfile[6]));	

if (exists("slimgui")){
defineConstant("sigma", 0.1);	
}



	// sigma=0.2;
	 //defineConstant("outpath","/Users/cj/Desktop/W50_0.2_.trees");
	 
	defineConstant("id",format("%.0f",runif(1,1e6,1e7-1)));

    defineConstant("K", 30);  // carrying-capacity per unit square (roughly)
    defineConstant("SD", sigma);  // sigma_D, the dispersal distance
    defineConstant("SI", sigma);  // sigma_I, the spatial interaction distance
    defineConstant("SM", SI);  // sigma_M, the mate choice distance
    defineConstant("L", 4);    // mean lifetime at stationarity
    defineConstant("W", 10.0);  // width and height of the simulated area
    defineConstant("G", 1e8);  // genome length
    defineConstant("FECUN", 1/L); // mean fecundity
    defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function

    
    // spatial competition
    initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
    i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
    
    // mate choice
    initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
    i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}









reproduction() {
	
    mate = i2.drawByStrength(individual, 1);
    if (mate.size()) {
        nOff = rpois(1, FECUN);
		POS=individual.spatialPosition; //// position of birther
		
		CircleOfPositions=c(c(SD,0),c(SD,SD),c(0,SD),c(-SD,SD),c(-SD,0),c(-SD,-SD),c(0,-SD),c(SD,-SD));  //// 8 points around individual at SD distance
		AngleOfPositions=c(0,45,90,135,180,225,270,315);

		
        for (i in seqLen(nOff)) {			
			
			Choices=c();
			
			for (x in seq(1,length(CircleOfPositions),2)){
				
				CIRCLEHERE=c(CircleOfPositions[x-1],CircleOfPositions[x]);  
				POSHERE=(POS+CIRCLEHERE);                                    //// Position in circle around individual
				RESOURCE=p1.spatialMapValue("map1", POSHERE);                //// Resource at position
				Choices=c(Choices,RESOURCE);	                             //// add it to choice

			}

			BEST=which(Choices==max(Choices));		 //// find best options	
			if (size(BEST)>1){
				BEST=sample(BEST,1);	         //// if more than one 
			}
			
			Gamma = rnorm(1, 0, SD);             //// find new position towards the best choice
			Theta1 = runif(1, ( AngleOfPositions[BEST] - 22.5), AngleOfPositions[BEST] + 22.5);          //// using this equation Xnew = Xold + Gamma*theta
			
			pos= POS + c((Gamma*cos(Theta1)),(Gamma*sin(Theta1))); //// the new position
			// print(c(POS,pos));    ///seems ok
			

            if (p1.pointInBounds(pos)) {
            	offspring = subpop.addCrossed(individual, mate);
          		offspring.setSpatialPosition(pos);
          	}
			
			
        }
    }
    return;
	
}




1 early() {
	
    sim.addSubpop("p1", asInteger(K * W * W)); /// Initial Size
    p1.setSpatialBounds(c(0, 0, W, W));  //// Spatial Bounds of Population
    for (ind in p1.individuals) {
        ind.setSpatialPosition(p1.pointUniform()); //// Set up Population
    }
		
		
	defineConstant("mapValues", rep(1.0,100));        ////////////// Create X values to be used in the map
	p1.setValue("L", mapValues);     ///// List of map values
	p1.setValue("REP", 0);           ///// Used for changing Enviromenet
	// p1.setValue("ENV_CAP",sum(mapValues)*Capacity_Multiplier);    ////Capacity of population size
	p1.setValue("OUT",0);   //// Used for outputing files 

	
	p1.setValue("LEN_WINDOW",100000);  ////length of window we want to do calculations/metrics on
	p1.setValue("WINDOWS_XP",seq(0,sim.chromosome.lastPosition,100000));  ///// Split Chromosome into windows and store them
	
	
	p1.defineSpatialMap("map1", "xy", c(10,10), mapValues, interpolate=T,valueRange=c(0.0, 1.0), colors=c("black", "white"));   ////set up the background capacity map

	
	defineConstant("pdfPath", writeTempFile("plot_", ".pdf", "")); ////used to init plotting	
	sim.setValue("pdfOpened", F);  ////////used to init plotting
	deleteFile(paste(c('Hetero_Mod_Mvm_Sigma_',asString(ID),asString(sigma)),''));	
	
	
    i1.evaluate();
}



early() {
    i1.evaluate(p1);
    inds = p1.individuals;
    competition = i1.totalOfNeighborStrengths(inds);
	
	location = inds.spatialPosition; ////////get the x and y value of each individual
	optimum = p1.spatialMapValue("map1", location);
	
    inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition)) * optimum;    
    // scale fitness at edges
    inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0);
	
}


1: late() {
	// to be ready for mate choice
   i2.evaluate(p1);
}

2: late() {
	GEN=sim.generation;
	

	if ( (GEN%Big_Timer==0) & (p1.getValue("REP")<=3) & ( GEN < Start_INC ) & ( GEN>= (Start_DEC+Big_Timer) ) )
	{////////////// Moving into inner row of matrix //////////////////////////////////////////////////////////////////////////////////////////////////////
	
		REPO=p1.getValue("REP");
		p1.setValue("REP", (REPO+1));
	
	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	if( (GEN%Small_Timer==0) & sum(p1.getValue("L")) > 20 & ( GEN < Start_INC ) & ( GEN>= Start_DEC ) )
	{//////////////// Changing values of row(layer) /////////////////////////////////
		
		REPZ=p1.getValue("REP");
		Li = p1.getValue("L");
		Li=matrix(Li,10,10);
		
		for ( REPO in 0:REPZ )
		{ 
    		Li[REPO,(REPO+1):(ncol(Li)-(REPO+1))]=Li[REPO,(REPO+1):(ncol(Li)-(REPO+1))] - decrease_amount;		
    		Li[REPO:(ncol(Li)-(1+REPO)),REPO]=Li[REPO:(ncol(Li)-(1+REPO)),REPO] - decrease_amount;			
    		Li[nrow(Li)-(1+REPO),(REPO+1):(ncol(Li)-(REPO+1))]=Li[nrow(Li)-(1+REPO),(REPO+1):(ncol(Li)-(REPO+1))] - decrease_amount;			
    		Li[(REPO+1):(nrow(Li)-(2+REPO)),nrow(Li)-(REPO+1)]=Li[(REPO+1):(nrow(Li)-(2+REPO)),nrow(Li)-(REPO+1)] - decrease_amount;
    		
    
    		Zeroz=which(Li<0.1); /// Get rid of The 1.38778e-16 BUG + anything that is <0
    		Li[Zeroz]=0;
    	}
    	p1.defineSpatialMap("map1", "xy", c(10, 10), Li, interpolate=T,valueRange=c(0.0, 1.0), colors=c("black", "white"));
    	p1.setValue("L", Li);
    	p1.setValue("ENV_CAP",sum(Li)*Capacity_Multiplier);
    	print(matrix(Li,10,10));
    	
    }////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	if (GEN==60000)		
	{	
	sim.outputFull(filePath='BurnInFileOut');	
		
	}



	if ( ( GEN%Big_Timer==0 ) & ( p1.getValue("REP")>0 ) &  ( GEN>=(Start_INC) ) )
    {////////////// Map Values changing (plus) ////////////////////////////////////////////////////////////////////////////////////////////////
    
    	REPO=p1.getValue("REP");
    	p1.setValue("REP", (REPO-1));
    
    
    }//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    if ( ( GEN%Small_Timer==0 ) & (sum(p1.getValue("L")) < 100) &  ( GEN>=Start_INC ) )
    {
    	Li = p1.getValue("L");
    	Li=matrix(Li,10,10);
    	REPZ=p1.getValue("REP");
    	
    	for ( REPO in REPZ:4 )
    	{ 
    		Li[REPO,(REPO+1):(ncol(Li)-(REPO+1))]=Li[REPO,(REPO+1):(ncol(Li)-(REPO+1))] + decrease_amount;		
    		Li[REPO:(ncol(Li)-(1+REPO)),REPO]=Li[REPO:(ncol(Li)-(1+REPO)),REPO] + decrease_amount;			
    		Li[nrow(Li)-(1+REPO),(REPO+1):(ncol(Li)-(REPO+1))]=Li[nrow(Li)-(1+REPO),(REPO+1):(ncol(Li)-(REPO+1))] + decrease_amount;			
    		Li[(REPO+1):(nrow(Li)-(2+REPO)),nrow(Li)-(REPO+1)]=Li[(REPO+1):(nrow(Li)-(2+REPO)),nrow(Li)-(REPO+1)] + decrease_amount;
    		
    
    		Onez=which(Li>0.9); /// Get rid of The 1.38778e-16 BUG + anything that is <0
    		Li[Onez]=1;
    	}
    
    	
    	p1.defineSpatialMap("map1", "xy", c(10, 10), Li, interpolate=T,valueRange=c(0.0, 1.0), colors=c("black", "white"));
    	p1.setValue("L", Li);
    	p1.setValue("ENV_CAP",sum(Li)*Capacity_Multiplier);
    	print(matrix(Li,10,10));
    	
    }



	if ( (GEN>=0 & GEN%250==0) | ( (GEN>=Start_DEC) & (GEN%2==0) & (GEN<=(Start_INC+200)) ) )///when to make matrics//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	{
		OUT_HERE=p1.getValue("OUT");   /// Output file name indicator
		
		

		if (size(p1.individuals)>=100)
			{
			INDS=sample(p1.individuals,100,F); //// sample 100 individuals 
			}

			
		else
			{
			INDS=sample(p1.individuals,size(p1.individuals),F);	
			}
		// INDS.genomes.outputVCF(filePath=paste(c('Myvcf_',OUT_HERE,'.vcf'),''));     //// VCF output 

		

		MY_WINDOWS=p1.getValue("WINDOWS_XP"); /////Get the Windows
		LENGTH_OF_WINDOW=p1.getValue("LEN_WINDOW");  ////gap of windows

		mysamples = INDS; ////select random individuals for calcs

		HETERO=subpopHeterozygosity(p1,size(mysamples)); ////calc heterozy
		HETEROSD=subpopHeterozygositystd(p1,size(mysamples));
		NEWBORN=which(p1.individuals.age==0);
		RES=mean(p1.spatialMapValue("map1", p1.individuals[NEWBORN].spatialPosition));
		
		
		writeFile(paste(c('Hetero_Mod_Mvm_Sigma_',asString(ID),asString(sigma)),''),paste(c(asString(HETERO),asString(HETEROSD),asString(GEN),asString(p1.individualCount),asString(RES)),'\t'),append=T); /////write it out in our file
			
		p1.setValue("OUT",OUT_HERE+1); ///// renew value for next print
		
	}////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




print(paste(c('Population Size: ',p1.individualCount),'\t'));
print(paste(c('Generation: ',sim.generation),'\t'));
print(clock());
print(date());
print(sigma);
}


150000 late() { /////end time
}