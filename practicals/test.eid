///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////
// set up a simple simulation

initialize()

{
// set the overall mutation rate
initializeMutationRate(1e-7);


///////////////////////////////////////// DIFFERENT MUTATIONS AVAILABLE
// m1 mutation type: neutral
initializeMutationType("m1", 0.5, "f", 0.0);

// m2 mutation type: neutral
initializeMutationType("m2", 0.5, "f", 0.0);

// m3 mutation type: neutral
initializeMutationType("m3", 0.5, "f", 0.00);



///////////////////////////////////////// GENOMIC ELEMENTS OF CHROMOSOME

// g1 genomic element type: uses m1,m2,m3
initializeGenomicElementType("g1", c(m1,m2,m3), c(0.4,0.5,0.1));


//////////////////////////////////////// CONTSTRUCTION OF CHROMOSOME
////// STRUCTURE
// uniform chromosome of length 100 kb
initializeGenomicElement(g1, 0, 10000);


/// RECOMB
// uniform recombination along the chromosome
initializeRecombinationRate(2e-7);



//you can set all sorts of parameters here
//X=10;
//you can also print stuff here like this
//print(X);



}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////   SIMULATION BEGINS

// create a population of 500 individuals

1
{
sim.addSubpop("p1", 100);

}





1500 late() {
	
Li=rep(1,100);

for (REPO in 0:3){
	
	
Li[(REPO*10):((REPO*10)+9)]=0;
Li[((99-(REPO*10))-9):(99-(REPO*10))]=0;
Li[seq(((REPO*10)+REPO),99,10)]=0;
Li[seq(9+((10*REPO)-REPO),99,10)]=0;	
	
print(matrix(Li,10,10));

}



REPO=0;


Li[((REPO*10)+REPO):((REPO*10)+9-REPO)]=1;
Li[((99-(REPO*10))-9+REPO):((99-(REPO*10))-REPO)]=1;
Li[seq(((REPO*10)+REPO),99-((REPO*10)+REPO),10)]=1;
Li[seq(9+((10*REPO)-REPO),99-(9+((10*REPO)-REPO)),10)]=1;





print(matrix(Li,10,10));
}