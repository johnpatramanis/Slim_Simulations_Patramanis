///////////////////////////////////////////////////////   NON WF   ////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////// Benef Mutations and Absolute Fitnesssssss ///////

initialize() {
	
	
initializeSLiMModelType("nonWF");
defineConstant("K", 500);

initializeMutationType("m1", 0.5, "f", 0.0);
m1.convertToSubstitution = T;

initializeMutationType("m2", 1.0, "f", 0.9); // dominant beneficial
m1.convertToSubstitution = T;


initializeGenomicElementType("g1", m1, 1.0);
initializeGenomicElement(g1, 0, 99999);
initializeMutationRate(1e-7);
initializeRecombinationRate(1e-8);


}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

reproduction() {
	
	
for (i in 1:5)
subpop.addCrossed(individual, subpop.sampleIndividuals(1));


}



1 early() {
	
sim.addSubpop("p1", 10);

}


1000 early() {
	
mutant = sample(p1.individuals.genomes, 10);
mutant.addNewDrawnMutation(m2, 10000);  //// add benef mut to pop

}


early() {

p1.fitnessScaling = K / (p1.individualCount * mean(p1.individuals.fitnessScaling));

}


1: late() {
	
inds = p1.individuals;
catn(sim.generation + ": " + size(inds) + " (" + max(inds.age) + ")");

}


2000 late() {
	
// sim.outputFull(ages=T);

}