///// Specieation due to spacial variation!
///// Example from manual
///// Mating Choice based distance interactions + Competiotion based on interactions and on a Phenotype that is based on Quantitive trait + Enviromental Effects and adaptation to them
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
initialize() {
	
	
defineConstant("sigma_C", 0.1);
defineConstant("sigma_K", 0.5);
defineConstant("sigma_M", 0.1);
defineConstant("slope", 1.0);
defineConstant("N", 700);
initializeSLiMOptions(dimensionality="xyz");
initializeMutationRate(1e-6);
initializeMutationType("m1", 0.5, "f", 0.0); // neutral
initializeMutationType("m2", 0.5, "n", 0.0, 1.0); // QTL
m2.convertToSubstitution = F;
initializeGenomicElementType("g1", c(m1, m2), c(1, 0.1));
initializeGenomicElement(g1, 0, 1e5 - 1);
initializeRecombinationRate(1e-8);


initializeInteractionType(1, "xyz", reciprocal=T,
maxDistance=sigma_C * 3); // competition
i1.setInteractionFunction("n", 1.0, sigma_C);


initializeInteractionType(2, "xyz", reciprocal=T,
maxDistance=sigma_M * 3); // mate choice
i2.setInteractionFunction("n", 1.0, sigma_M);


}



fitness(m2) { return 1.0; }///silence muts



1 late() {
	
	
sim.addSubpop("p1", N);
p1.setSpatialBounds(c(0.0, 0.0, -1.0, 1.0, 1.0, 1.0));

p1.individuals.setSpatialPosition(p1.pointUniform(N));
p1.individuals.z = 0.0;


defineConstant("mapValues", runif(4, -1, 1));        ////////////// Create X values to be used in the map

p1.defineSpatialMap("map1", "xy", c(2, 2), mapValues, interpolate=F,valueRange=c(0.0, 1.0), colors=c("red", "yellow")); ///////Create a map ontop of our spacial plane with different sections,with different values


}




modifyChild() {
	
// set offspring position based on parental position
do pos = c(parent1.spatialPosition[0:1] + rnorm(2, 0, 0.005), 0.0); ////dimensions of child are parent1's x,y + 0 for z
while (!p1.pointInBounds(pos)); ////check if child in bounds of population

child.setSpatialPosition(pos);

return T;

}


1: late() {
	
inds = sim.subpopulations.individuals;

//// construct phenotypes and fitness effects from QTLs
phenotype = inds.sumOfMutationsOfType(m2);   ///////phenotype, dim z, is dependent on m2 mutations
location = inds.spatialPosition[rep(c(T,T,F), inds.size())]; ////////get the x and y value of each individual
optimum = p1.spatialMapValue("map1", location); //////map each individuals (x,y) coordinates on the map and get a value for their location
inds.fitnessScaling = 1.0 + dnorm(phenotype, optimum, sigma_K);  //////scale individuals fitness based on phenotype AND location
inds.z = phenotype;


// print('###########');
// print(phenotype);
// print(sigma_K);
// print(dnorm(phenotype, optimum, sigma_K));

// print('###########');





//// evaluate phenotypic competition
i1.evaluate();
competition = sapply(inds, "sum(i1.strength(applyValue));");
effects = 1.0 - competition / size(inds);
inds.fitnessScaling = inds.fitnessScaling * effects;
// evaluate mate choice in preparation for next generation
i2.evaluate();


}


mateChoice() {
	
// spatial mate choice
return i2.strength(individual);

}


// 1:5000 late() {
// if (sim.generation == 1)
// cat(" gen mean sd\n");

// if (sim.generation % 100 == 1)
// {
// phenotypes = p1.individuals.z;
// cat(format("%5d ", sim.generation));
// cat(format("%6.2f ", mean(phenotypes)));
// cat(format("%6.2f\n", sd(phenotypes)));
// }
// }



20001 late(){
P1pos=cbind(sim.subpopulations.individuals.x,sim.subpopulations.individuals.y,sim.subpopulations.individuals.z);

POS=P1pos;


deleteFile("positions.txt");


for (LINU in 0:(nrow(POS)-1)){

writeFile("positions.txt",paste(POS[LINU,],"\t"),append=T);

}

system("python3 posplotter2.py --posfile positions.txt", wait=T);


}


