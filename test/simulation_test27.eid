//////////////////////////////////////////////////////////////// NON - WRIGHT FISHER ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


initialize() {
	
	
initializeSLiMModelType("nonWF"); /////////////////////////////// Initialises a Non WF model <<<<<<<<<<
defineConstant("K", 500);

defineConstant("Norig", 50);
defineConstant("LifeTable",c(0.1,0.2,0.2,0.2,0.2,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1.0)); /////Mortality Probablity


initializeMutationType("m1", 0.5, "f", 0.0);
m1.convertToSubstitution = F;

initializeGenomicElementType("g1", m1, 1.0);

initializeGenomicElement(g1, 0, 99999);


initializeMutationRate(1e-7);
initializeRecombinationRate(1e-8);

	
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////// Controls Birth rates


reproduction() {
	
if (individual.age > 1) {
	
mate = subpop.sampleIndividuals(1, minAge=3); ///// smaple an indiv to mate, of age at least 3G
subpop.addCrossed(individual, mate);  //// NOW KISS!

}


}

1 early() {

sim.addSubpop("p1", Norig);
p1.individuals.age = rdunif(Norig, min=0, max=7);

}


/////// Controls Death Rate , absolute fitness desides probablity of death!


early() {
	
// life table based individual mortality
inds = p1.individuals;

// print(inds.fitnessScaling);    ///// Initially fitnessScaling is 1.0 for all
// print("&&&&&"); 



ages = inds.age;
mortality = LifeTable[ages];   ////// Basically a hash table


survival = 1 - mortality;

inds.fitnessScaling = survival;


// print(inds.fitnessScaling); ///// Now fitness of each individual is dependent on age (scaled)
// print("&&&&&");



// density-dependence, factoring in individual mortality
p1.fitnessScaling = K / (p1.individualCount * mean(survival));  //// Calculate what the fitness scaling of the subpopulation should be to keep size relative
// print(p1.fitnessScaling);




}







// late() {
	


// inds = p1.individuals;
// catn(sim.generation + ": " + size(inds) + " (" + mean(inds.age) + ")");


// LINE=c(size(inds)+'\t'+mean(inds.age)+'\t'+sim.generation);
// writeFile("test26.txt",LINE,append=T);


// catn(sim.generation + ": " + paste(sort(p1.individuals.age)));  // print our age distribution after mortality


// }




6000 late() {
	
// sim.outputFull(ages=T);



}

