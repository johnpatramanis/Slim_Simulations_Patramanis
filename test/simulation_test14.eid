//// Advanced Models - Relatedness, Inbreeding, heterozigosity
////
////
/////////////////////////////////////////
// set up a simple simulation
initialize() {



//set up filepaths	
defineConstant("mu", 1.67e-09);	
defineConstant("outPref", "out_test_WF_2D");	
defineConstant("psmc_file", "/mnt/c/Users/Johnp/Documents/SlimFiles/fromHernan/Nipponia_softCollapse_gen3_varSCALE2.txt");
defineConstant("ranges_file", "/mnt/c/Users/Johnp/Documents/SlimFiles/fromHernan/Nipponia_softCollapse_gen3_varSCALE2_ranges.txt");
defineConstant("rho_file_in", "/mnt/c/Users/Johnp/Documents/SlimFiles/fromHernan/RecombFile.txt");
defineConstant("coord_file_in","/mnt/c/Users/Johnp/Documents/SlimFiles/fromHernan/GCF_000247815.1_FicAlb1.5_genomic.gff_for_SLiM.txt");



rho_file = readFile(rho_file_in);


defineConstant("L", asInteger(strsplit(rho_file[length(rho_file)-1],"\t")[2])); /// L= length of sequence
coord_file = readFile(coord_file_in);





//random seed
setSeed(rdunif(1, 0, asInteger(2^32) - 1));	
initializeSLiMOptions(keepPedigrees = T , nucleotideBased=T);  ////Nucleotide mode /////////////////////////////////// REQUIRED for  Pedigry tracking
initializeAncestralNucleotides(randomNucleotides(L+1)); ///Reference Nucl seq
	
//mutations	
initializeMutationTypeNuc("m1", 0.5, "f", 0.0);         // non-coding	
initializeMutationTypeNuc("m2", 0.5, "f", 0.0);         // synonymous	
initializeMutationTypeNuc("m3", 0.2, "g", -0.03, 0.2);  // deleterious	
initializeMutationTypeNuc("m4", 0.5, "f", 0.2);         // beneficial	


initializeMutationTypeNuc("m5", 0.5,"n", 0.0, 0.5);        // CUSTOM	
m5.convertToSubstitution = F; //does not allow m5 to be considered subst after fixation
	
	
	
	
	
//Create Chromosome Building Blocks	//Jukes Candor simplest mutation matrix, transition=transversion
initializeGenomicElementType("g1", c(m2,m3), c(0.2,0.8), mmJukesCantor(mu));  // exon	
initializeGenomicElementType("g2", c(m1,m3), c(0.9,0.1), mmJukesCantor(mu));           // intron	
initializeGenomicElementType("g3", c(m1,m5,m4), c(0.2,0.4,0.4), mmJukesCantor(mu));           // non-coding	
	

///Construct Chromosome from Coordinate file
for (coord_line in coord_file)
{
	ROW = strsplit(coord_line, "\t");
	feature = ROW[2];

	if(feature=="exon") {
		initializeGenomicElement(g1, asInteger(ROW[3]), asInteger(ROW[4]));
	}	
	
	if(feature=="intron") {	
		initializeGenomicElement(g2, asInteger(ROW[3]), asInteger(ROW[4]));	
	}	
	
	if(feature=="non_coding") {	
		initializeGenomicElement(g3, asInteger(ROW[3]), asInteger(ROW[4]));	
	}	
	
}	

//Construct Recombination Landscape from file
rates = NULL;
ends = NULL;

for (rho_line in rho_file)
{
	components = strsplit(rho_line, "\t");
	ends = c(ends, asInteger(components[2])); //append to ends file
	rates = c(rates, asFloat(components[7])); //append to rates file
}

defineConstant("recomb_ends", ends); //define ends vector
defineConstant("recomb_rates", rates); //define rate vector
initializeRecombinationRate(rates, ends); //recombination only needs those two things ends+rates


// psmc file
file = readFile(psmc_file);
defineConstant("psmc", file); //for later use

// ranges file
file3 = readFile(ranges_file);
defineConstant("ranges", file3); //for later use

initializeSex("A");

}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////   SIMULATION BEGINS

// create a population of 500 individuals

fitness(m5) { return 1.0; } //// As far as the simulation is conserned the m5 mutations are now neutral HOWEVER, they still posses internally a fitness coeficient which we use later


1 {
	
sim.addSubpop("p1", 500);

deleteFile("diversity.txt");	

}

mateChoice() { ////// MODIFY MATING CHOICE
// Prefer relatives as mates
////print(individual.relatedness(sourceSubpop.individuals)); //// > 1.0 for self 0.5 siblings 0.25 cousins 0 if no grandparents sharing

return weights * (individual.relatedness(sourceSubpop.individuals) +0.01); //// individual.relatedness=> vector of how related each ind of the population is with me (in the parenthesis)
}



////////// HETEROZIGOSITY CALC //////////////
1:20000 late() {
	
if(sim.generation%100==0){
	
// Calculate mean nucleotide heterozygosity across the population
total = 0.0;/// we will apend here

for (ind in p1.individuals) ///each individual
{
/// Calculate the nucleotide heterozygosity of this individual
muts0 = ind.genomes[0].mutations; ////muts of first genome
muts1 = ind.genomes[1].mutations; //// muts of second
/// Count the shared mutations
shared_count = sum(match(muts0, muts1) >= 0); //// number of shared

///// All remaining mutations are unshared (i.e. heterozygous)
unshared_count = muts0.size() + muts1.size() - 2 * shared_count;


//// pi is the mean heterozygosity across the chromosome
pi_ind = unshared_count / (sim.chromosome.lastPosition + 1); ////get heterozigosity of individ
total = total + pi_ind;  ////append here


}

pi = total / p1.individuals.size();

LINE=c(pi+'\t'+sim.generation);

writeFile("diversity.txt",LINE,append=T);


}
}