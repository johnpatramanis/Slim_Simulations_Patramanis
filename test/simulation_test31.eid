///////////////////////////////////////////////////////   NON WF   ////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Spacial Comp + Choice  ///////////////////////////////////////////////////////////////////////////


initialize() {
	
	
initializeSLiMModelType("nonWF");////non WF

initializeSLiMOptions(dimensionality="xy", periodicity="xy"); ////activate space



defineConstant("K", 500); // carrying capacity
// defineConstant("Gs", 1000); // Generations
defineConstant("S1", 0.1); // Max spatial competition distance
defineConstant("S2", 0.1); // Max spatial mating choice distance


initializeMutationType("m1", 0.5, "f", 0.0);////neutrals
m1.convertToSubstitution = T;

initializeGenomicElementType("g1", m1, 1.0);
initializeGenomicElement(g1, 0, 99999);
initializeMutationRate(1e-7);
initializeRecombinationRate(1e-8);


// spatial competition
initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3*S1);
i1.setInteractionFunction("n", 1.0, S1);
// spatial mate choice
initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3*S2);
i1.setInteractionFunction("n", 1.0, S2);


}




reproduction() {
	
	

mate = i2.nearestNeighbors(individual, 1); // choose our nearest neighbor as a mate, within the max distance



for (i in seqLen(rpois(1, 0.1))) ////only enters loop in 10% of times

{

if (mate.size()) ////can either mate or selfy!
offspring = subpop.addCrossed(individual, mate);
else
offspring = subpop.addSelfed(individual);
// set offspring position
pos = individual.spatialPosition + rnorm(2, 0, 0.02);
offspring.setSpatialPosition(p1.pointPeriodic(pos));
}


}




1 early() {
	
	
sim.addSubpop("p1", 10);
// random initial positions
p1.individuals.setSpatialPosition(p1.pointUniform(1));
sim.setValue("pdfOpened", F);
sim.setValue("Gs", 1000.0);


}






early() { /////fitness tuning
	
i1.evaluate();

// spatial competition provides density-dependent selection
inds = p1.individuals;
competition = i1.totalOfNeighborStrengths(inds);
// print(competition);
competition = (competition + 1) / (2*PI * S1^2);



inds.fitnessScaling = K / competition;
print(inds.fitnessScaling);

p1.fitnessScaling = K / (p1.individualCount * mean(K/competition));
print(p1.fitnessScaling);
print(paste(c('Population Size:',p1.individualCount),'\t'));'));
print(paste(c('Generation:',sim.generation),'\t'));'));
// print(p1.fitnessScaling);

}





1:1000 late(){	


for (ind in p1.individuals)  // individuals can move around a bit
{
newPos = ind.spatialPosition + runif(2, -0.01, 0.01);
ind.setSpatialPosition(p1.pointPeriodic(newPos));
}
// then look for mates
i2.evaluate();














if (sim.generation%10==0){

	P1pos=cbind(p1.individuals.x,p1.individuals.y);

	POS=P1pos;


	deleteFile("positions.txt");
	
		for (LINU in 0:(nrow(POS)-1)){

		writeFile("positions.txt",paste(POS[LINU,],"\t"),append=T);

		}

	system("python3 posplotter1.py --posfile positions.txt", wait=T);



	if (!sim.getValue("pdfOpened"))
		
	{

	system("mupdf -r 18 plot.pdf",wait=F);
	sim.setValue("pdfOpened", T);


	}

	else{
	system("pkill -HUP mupdf",wait=F);
	}

}




}

