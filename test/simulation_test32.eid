///////////////////////////////////////////////////////   NON WF   ////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////// Spacial Comp + Choice  ///////////////////////////////////////////////////////////////////////////


initialize() {
	
	
initializeSLiMModelType("nonWF");////non WF
defineConstant("LifeTable",c(1.0,1.0,1.0,0.8,0.6,0.4,0.2,0.1,0.05,0.0)); 
initializeSLiMOptions(dimensionality="xy"); ////activate space



defineConstant("K", 500); // carrying capacity
// defineConstant("Gs", 1000); // Generations
defineConstant("S1", 0.1); // Max spatial competition distance
defineConstant("S2", 0.1); // Max spatial mating choice distance
defineConstant("start", clock());

initializeMutationRate(1e-6);

initializeMutationType("m1", 0.5, "f", 0.0); // neutral
initializeMutationType("m2", 0.5, "n", 0.0, 1.0); // QTL
m2.convertToSubstitution = F;

initializeGenomicElementType("g1", c(m1, m2), c(1, 0.1));
initializeGenomicElement(g1, 0, 1e7 - 1);

initializeRecombinationRate(1e-8);


// spatial competition
initializeInteractionType(1, "xy", reciprocal=T, maxDistance=3*S1);
i1.setInteractionFunction("n", 1.0, S1);
// spatial mate choice
initializeInteractionType(2, "xy", reciprocal=T, maxDistance=3*S2);
i1.setInteractionFunction("n", 1.0, S2);
initializeSex("A");

}




reproduction() {

// Give_Birth = (K/(size(sim.subpopulations.individuals)));
// Give_Birth=rbinom(1,1,0.1);
Give_Birth=rnorm(1,(K/(size(sim.subpopulations.individuals))),0.1);
interinds=i2.interactingNeighborCount(individual);

if ((Give_Birth>=1) & (interinds>0 )){

counter=0;
mate = i2.drawByStrength(individual, 1);

TR=(asInteger(mate.sex==individual.sex) + asInteger(counter<=100));

while ( TR>1 ) 
{
	mate = i2.drawByStrength(individual, 1); // choose strongest neighbor as a mate, within the max distance
	counter=counter+1;
	TR=(asInteger(mate.sex==individual.sex) + asInteger(counter<=100));
}	
do
{
	mate = i2.drawByStrength(individual, 1); // choose strongest neighbor as a mate, within the max distance
	counter=counter+1;
	if (mate.sex == individual.sex) {
		break;	}
} while (counter < 100)

if (individual.sex==mate.sex){
print('No Birth');	
}

if (individual.sex=='M' & mate.sex=='F'){
offspring = subpop.addCrossed(mate,individual);
mother=mate;
newPos = mother.spatialPosition + runif(2, -0.02, 0.02);
offspring.setSpatialPosition(p1.pointReflected(newPos));
}

if (individual.sex=='F' & mate.sex=='M'){
offspring = subpop.addCrossed(individual,mate);	
mother=individual;
newPos = mother.spatialPosition + runif(2, -0.02, 0.02);
offspring.setSpatialPosition(p1.pointReflected(newPos));

}


// print('Birth!');
}




}




1 early() {

sim.addSubpop("p1", 20);
// random initial positions
p1.individuals.setSpatialPosition(p1.pointUniform(1));
sim.setValue("pdfOpened", F);

// runif(25, 0, 1)
// seq(0, 1, length=9)
defineConstant("mapValues", c(1.0,0.0,0.0,1.0));        ////////////// Create X values to be used in the map
p1.defineSpatialMap("map1", "xy", c(2,2), mapValues, interpolate=T,valueRange=c(0.0, 1.0), colors=c("red", "yellow")); ///////Create a map ontop of our spacial plane with different sections,with different values



}






early() { /////fitness tunning
i1.evaluate();

// spatial competition provides density-dependent selection
inds = p1.individuals;
competition = i1.totalOfNeighborStrengths(inds);
// print(competition);
competition = (competition + 1) / (2*PI * S1^2);
competition = competition/(100*K);
// print(competition);


location = inds.spatialPosition; ////////get the x and y value of each individual
optimum = p1.spatialMapValue("map1", location);
Values= competition - optimum ;
ages = inds.age;
mortality = LifeTable[ages];



print('&&&&&&&');

// print(Values[0]);

// VeryLow=which(Values<0.1);



// Values[VeryLow]=0; /// Cleansing of weak!

// print(Values);
// print(inds.fitnessScaling);


// print('%%%%%%%%%%');
// print(Values);


Negs=which(Values>=1.0);
Values[Negs]=1.0; /// Negative values not allowed!

inds.fitnessScaling = 1.0 - Values;
inds.fitnessScaling = inds.fitnessScaling * mortality;

if (p1.individualCount>=K){
	
inds.fitnessScaling = (inds.fitnessScaling - (min(inds.fitnessScaling)))/(max(inds.fitnessScaling)-min(inds.fitnessScaling));

}
// print('#######');


p1.fitnessScaling = K / (p1.individualCount);
// print(p1.fitnessScaling);

print(paste(c('Population Size: ',p1.individualCount),'\t'));
print(paste(c('Generation: ',sim.generation),'\t'));
// LL= sim.generation>=5000 ? 5  else 10; ////cool assignment method
// print(LL);
print(paste(c('Time: ',clock()-start),'\t'));
print(paste(c('Memory (MB): ',usage()),'\t'));


}










1:10000 late(){	

for (ind in p1.individuals)  // individuals can move around a bit
{
newPos = ind.spatialPosition + runif(2, -0.02, 0.02);
ind.setSpatialPosition(p1.pointReflected(newPos));
}
// then look for mates
i2.evaluate();




if (sim.generation%1000==0){

	P1pos=cbind(p1.individuals.x,p1.individuals.y);

	POS=P1pos;


	deleteFile("positions.txt");
	
		for (LINU in 0:(nrow(POS)-1)){

		writeFile("positions.txt",paste(POS[LINU,],"\t"),append=T);

		}

	system("python3 posplotter1.py --posfile positions.txt", wait=T);



	if (!sim.getValue("pdfOpened"))
		
	{

	system("mupdf -r 18 plot.pdf",wait=F);
	sim.setValue("pdfOpened", T);


	}

	else{
	system("pkill -HUP mupdf",wait=F);
	}

}




}

