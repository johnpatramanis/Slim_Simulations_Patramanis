//// Advanced Models - The recombination Callback and its conditions
////
////
//// Stuff you can condition the recombination:

// individual > The focal parent that is generating a gamete
// genome1 > One genome of the focal parent; this is the initial copy strand
// genome2 > The other genome of the focal parent
// subpop > The subpopulation to which the focal parent belongs
// breakpoints > An integer vector of crossover breakpoints





/////////////////////////////////////////

//a simple scenario setup
initialize() {
	
initializeMutationRate(1e-7);
initializeMutationType("m1", 0.5, "f", 0.0);
initializeMutationType("m2", 0.5, "f", 0.1); //  marker of inversion
m2.color = "red";
m2.convertToSubstitution = F;
initializeGenomicElementType("g1", m1, 1.0);
initializeGenomicElement(g1, 0, 99999);
initializeRecombinationRate(1e-6);

}

1 {
	
sim.addSubpop("p1", 1000);

}


1 late() {
	
// give half the population the inversion
inverted = sample(p1.individuals, integerDiv(p1.individualCount, 2)); ///selects half of the individuals
inverted.genomes.addNewDrawnMutation(m2, 25000); ///m2 mutation at position 25kb


}




recombination() { ///// Thi takes place during the creation of offspring genomes from parents for each genome, the breakpoints have already been selected using the Recombination rates
	
if (genome1.containsMarkerMutation(m2, 25000) == genome2.containsMarkerMutation(m2, 25000))  ///if heterozygous
return F;

inInv = (breakpoints > 25000) & (breakpoints < 75000);

if (!any(inInv))  ///if all F
return F;


breakpoints = c(10000,40000);
return T;             //// return T mean the new breakpoints will be chosen, otherwise return F will make the preproposed breakpoints to return

}







1:100 late() {
	
// assess the prevalence of the inversion

pScr = "sum(applyValue.genomes.containsMarkerMutation(m2, 25000));"; //// mini custom function
p = sapply(p1.individuals, pScr);

p__ = sum(p == 0);
pI_ = sum(p == 1);
pII = sum(p == 2);

print(p__);
print(pI_);
print(pII);
print('#############################');



}