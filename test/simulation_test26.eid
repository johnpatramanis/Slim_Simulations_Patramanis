//////////////////////////////////////////////////////////////// NON - WRIGHT FISHER ///////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


initialize() {
	
	
initializeSLiMModelType("nonWF"); /////////////////////////////// Initialises a Non WF model <<<<<<<<<<
defineConstant("K", 500);
defineConstant("Norig", 1000);



initializeMutationType("m1", 0.5, "f", 0.0);
m1.convertToSubstitution = F;

initializeGenomicElementType("g1", m1, 1.0);

initializeGenomicElement(g1, 0, 99999);


initializeMutationRate(1e-7);
initializeRecombinationRate(1e-8);

	
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////// Controls Birth rates



reproduction() {  /////// Is called for each individual


// Give_Birth=rbinom(1,1,0.4);
Give_Birth = (Norig/(size(sim.subpopulations.individuals)));


if (Give_Birth>=1){
subpop.addCrossed(individual, subpop.sampleIndividuals(1)); ///////Randomly samples one individual from subpopulation and mates them with the one here
}

}


1 early() {
	
sim.addSubpop("p1", Norig);
deleteFile("test26.txt");


}


/////// Controls Death Rate , absolute fitness desides probablity of death!

early() {
	
// p1.fitnessScaling = K / p1.individualCount;   ///// Here we set K to a certain integer (500) and the population can increase its size until taht number as it will have a >1.0 fitness scale
// p1.fitnessScaling = 0.6 ;
 p1.fitnessScaling = Norig/size(sim.subpopulations.individuals);  ////This keeps the size close to the original
 // p1.fitnessScaling = 0.60;


}


late() {
	


inds = p1.individuals;
catn(sim.generation + ": " + size(inds) + " (" + mean(inds.age) + ")");


LINE=c(size(inds)+'\t'+mean(inds.age)+'\t'+sim.generation);
writeFile("test26.txt",LINE,append=T);




}




5000 late() {
	
// sim.outputFull(ages=T);



}

